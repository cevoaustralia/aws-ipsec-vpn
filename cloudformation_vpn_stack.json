{
	"AWSTemplateFormatVersion" : "2010-09-09",

		"Description" : "This stack brings up an auto-scaling group of one, which on boot assigns itself an elastic IP",

		"Parameters" : {
			"InstanceType" : {
				"Description" : "EC2 instance type",
				"Type" : "String",
				"Default" : "t2.micro"
			},

			"ImageID" : {
				"Description" : "The EC2 AMI ID",
				"Type" : "AWS::EC2::Image::Id"
			}, 

			"KeyPair" : {
				"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
				"Type" : "AWS::EC2::KeyPair::KeyName"
			},

			"SSHLocation" : {
				"Description" : "The IP address range that can be used to SSH to the EC2 instances",
				"Type": "String",
				"MinLength": "9",
				"MaxLength": "18",
				"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
				"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
			},

			"PublicIP" : {
				"Description" : "Should the EC2 Instance be assigned a public IP?",
				"Type" : "String",
				"AllowedValues" : ["true","false"],
				"Default" : "true"
			},

			"Subnets" : {
				"Description" : "The subnets to place the instances in",
				"Type" : "List<AWS::EC2::Subnet::Id>"
			},

			"VpcId" : {
				"Description" : "The VPC ID to create the stack in",
				"Type" : "AWS::EC2::VPC::Id"
			},

			"keyId" : {
				"Description" : "The ID for the Pre-Shared-Key KMS Key",
				"Type" : "String",
				"NoEcho" : "true"
			},

			"HostedZone" : {
				"Description" : "The Hosted Zone Name for the DNS Record",
				"Type" : "String"
			}

		},

		"Resources" : {
			"ServerGroup" : {
				"Type" : "AWS::AutoScaling::AutoScalingGroup",
				"Properties" : {
					"LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
					"MinSize" : "1",
					"DesiredCapacity" : "1",
					"MaxSize" : "1",
					"VPCZoneIdentifier" : { "Ref" : "Subnets" },
					"Tags" : [ {
						"Key" : "Name",
						"Value" : "IPsec VPN",
						"PropagateAtLaunch" : "true"
					}
					]
				}
			},

			"LaunchConfig" : {
				"Type" : "AWS::AutoScaling::LaunchConfiguration",
				"Properties" : {
					"KeyName" : { "Ref" : "KeyPair" },
					"ImageId" : { "Ref" : "ImageID" },
					"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
					"IamInstanceProfile" : { "Ref" : "InstanceProfile" },
					"InstanceType" : { "Ref" : "InstanceType" },
					"AssociatePublicIpAddress" : { "Ref" : "PublicIP" },
					"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
						"#!/bin/bash\n",
						"### get the instance ID and associate the stacks Elastic IP with it ###\n",
						"InstanceID=`/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id`\n",
						"AllocationID=",{ "Fn::GetAtt" : [ "IPAddress", "AllocationId" ] },"\n",
						"Region=",{ "Ref" : "AWS::Region"},"\n",
						"aws ec2 associate-address --region ${Region} --instance-id ${InstanceID} --allocation-id ${AllocationID}\n",
						"### fetch the Local IP and the PSK from the parameter store and update the configuration###\n",
						"LOCAL_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4/)\n",
						"PSK=$(aws ssm get-parameters --names vpn.psk --with-decryption --region=${Region} | jq -r .Parameters[0].Value)\n",
						"sudo sed -i \"s/XXX_LOCAL_IP_XXX/${LOCAL_IP}/g\" /etc/ipsec.secrets\n",
						"sudo sed -i \"s/XXX_PSK_XXX/${PSK}/g\" /etc/ipsec.secrets\n",
						"### Connect to AD/LDAP###\n",
						"# sudo realm join -U join_account@example.com example.com --verbose\n",
						"### enable and start the ipsec service###\n",
						"sudo systemctl enable ipsec\n",
						"sudo service ipsec start\n"
					]]}}
				}
			},

			"InstanceSecurityGroup" : {
				"Type" : "AWS::EC2::SecurityGroup",
				"Properties" : {
					"GroupDescription" : "Enable SSH access and HTTP access on the configured port",
					"VpcId" : { "Ref": "VpcId" },
					"SecurityGroupIngress" : 
						[ 
						{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"} },
						{ "IpProtocol" : "udp", "FromPort" : "4500", "ToPort" : "4500", "CidrIp" : "0.0.0.0/0"}, 
						{ "IpProtocol" : "udp", "FromPort" : "500", "ToPort" : "500", "CidrIp" : "0.0.0.0/0"} 
						]
				}
			},

			"IPAddress" : {
				"Type" : "AWS::EC2::EIP"
			},

			"AccessRole" : {
				"Type"  : "AWS::IAM::Role",
				"Properties" : {
					"AssumeRolePolicyDocument" : {
						"Statement" : [ {
							"Effect" : "Allow",
							"Principal" : {
								"Service" : [ "ec2.amazonaws.com" ]
							},
							"Action" : [ "sts:AssumeRole" ]
						} ]
					},
					"Path" : "/"
				}
			},

			"RolePolicies" : {
				"Type" : "AWS::IAM::Policy",
				"Properties" : {
					"PolicyName" : "vpnPolicy",
					"PolicyDocument" : {
						"Statement" : [
						{
							"Effect" : "Allow",
							"Action": ["ec2:DescribeAddresses", "ec2:AssociateAddress", "ec2:DisassociateAddress" ],
							"Resource" : "*"
						},
						{
							"Effect" : "Allow",
							"Action": ["ssm:GetParameters"],
							"Resource" : { "Fn::Join" : ["", [
								"arn:aws:ssm:", { "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":parameter/vpn.*"
							]]}
						},
						{
							"Effect" : "Allow",
							"Action": ["kms:Decrypt"],
							"Resource" : { "Fn::Join" : ["", [
								"arn:aws:kms:",{ "Ref" : "AWS::Region" },":",{ "Ref" : "AWS::AccountId" },":key/",{ "Ref" : "keyId" }
							]]}
						}
						]
					},
					"Roles" : [ { "Ref" : "AccessRole" } ]
				}
			},

			"InstanceProfile" : {
				"Type" : "AWS::IAM::InstanceProfile",
				"Properties" : {
					"Path" : "/",
					"Roles" : [ { "Ref" : "AccessRole" } ]
				}
			},

			"R53Record" : {
				"Type" : "AWS::Route53::RecordSet",
				"Properties" : {
					"HostedZoneName" : { "Ref" : "HostedZone" },
					"Comment" : "VPN DNS Entry",  
					"Name" : {
						"Fn::Join" : [ "", [
							"vpn", ".",
						{"Ref" : "AWS::Region"}, ".",
						{"Ref" : "HostedZone"}
						] ]
					},
					"Type" : "A",
					"TTL" : "300",
					"ResourceRecords" : [
					{ "Ref" : "IPAddress" }
					]
				}
			}

		},

		"Outputs" : {
			"ElasticIP" : {
				"Description" : "Elastic IP",
				"Value" :  { "Ref" : "IPAddress" }
			},
			"DNS" : {
				"Description" : "DNS Record",
				"Value" :  { "Ref" : "R53Record" }
			}
		}
}
